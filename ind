<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>🤖 Stylish Chatbot</title>

  <!-- Inter font for nicer typography -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&display=swap" rel="stylesheet">

  <style>
  :root{
    --bg: #0f1724;
    --card-bg: rgba(255,255,255,0.04);
    --muted: rgba(255,255,255,0.6);
    --accent: linear-gradient(135deg,#6a11cb,#2575fc);
    --radius: 16px;
  }

  /* ---------- Base layout ---------- */
  *{box-sizing:border-box}
  html,body{height:100%}
  body{
    font-family: "Inter", system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    margin:0;
    background: linear-gradient(180deg,#071021 0%, #0f1724 100%);
    display:flex;
    align-items:center;
    justify-content:center;
    padding:28px;
    color:#fff;
  }

  .wrap {
    width:100%;
    max-width:960px;
    display:grid;
    grid-template-columns: 360px 1fr;
    gap:28px;
    align-items:start;
  }

  /* ---------- Left panel (controls) ---------- */
  .left {
    background:var(--card-bg);
    border-radius:var(--radius);
    padding:18px;
    backdrop-filter: blur(8px);
    box-shadow: 0 8px 30px rgba(2,6,23,0.6);
    border:1px solid rgba(255,255,255,0.04);
  }

  .brand {
    display:flex;
    gap:12px;
    align-items:center;
    margin-bottom:12px;
  }
  .logo {
    width:44px;height:44px;border-radius:10px;
    background:linear-gradient(135deg,#ff6a00,#ee0979);
    display:flex;align-items:center;justify-content:center;font-weight:700;
    box-shadow:0 6px 18px rgba(236,72,153,0.15);
    font-size:18px;
  }
  .brand h3{margin:0;font-size:1.05rem}
  .brand p{margin:0;font-size:0.85rem;color:var(--muted)}

  .theme-row{display:flex;gap:8px;margin-top:14px;flex-wrap:wrap}
  .theme-btn{
    flex:1;
    padding:8px 10px;border-radius:10px;border:1px solid transparent;
    background:transparent;color:var(--muted);cursor:pointer;font-weight:600;
    transition:all .18s ease;
  }
  .theme-btn.active{
    color:#fff;
    background:linear-gradient(90deg,#2b2bff35,#6b6bff12);
    border:1px solid rgba(255,255,255,0.06);
    transform:translateY(-2px);
  }

  .prefs{margin-top:18px;font-size:0.9rem;color:var(--muted)}
  .prefs .row{display:flex;justify-content:space-between;padding:8px 0;border-bottom:1px dashed rgba(255,255,255,0.03)}
  .small{font-size:0.82rem;color:var(--muted)}

  /* ---------- Chat area (right) ---------- */
  .chat-card {
    height:80vh;
    background: linear-gradient(180deg, rgba(255,255,255,0.03), rgba(255,255,255,0.01));
    border-radius:18px;
    display:flex;flex-direction:column;overflow:hidden;
    border:1px solid rgba(255,255,255,0.04);
    box-shadow: 0 10px 40px rgba(2,6,23,0.6);
  }

  .chat-header {
    display:flex;align-items:center;gap:12px;padding:14px 18px;border-bottom:1px solid rgba(255,255,255,0.03);
    background: linear-gradient(180deg, rgba(255,255,255,0.02), transparent);
  }
  .chat-header h2{margin:0;font-size:1.05rem}
  .sub{color:var(--muted);font-size:0.85rem}

  .messages {
    flex:1;padding:18px;overflow:auto;display:flex;flex-direction:column;gap:12px;
    background-image: radial-gradient( circle at 10% 10%, rgba(255,255,255,0.01), transparent 15% );
  }

  /* bubble base */
  .msg{max-width:78%;padding:12px 14px;border-radius:14px;line-height:1.4;word-wrap:break-word;box-shadow: 0 6px 20px rgba(2,6,23,0.4);}

/* ===== Reset & Fonts ===== */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap');

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Poppins', sans-serif;
    background: linear-gradient(135deg, #1f1c2c, #928dab);
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* ===== Chat Container ===== */
.chat-container {
    width: 95%;
    max-width: 450px;
    height: 85vh;
    background: rgba(255, 255, 255, 0.12);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

/* ===== Header ===== */
.chat-header {
    background: rgba(255, 255, 255, 0.2);
    color: #fff;
    padding: 1rem;
    text-align: center;
    font-size: 1.3rem;
    font-weight: 600;
    letter-spacing: 1px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
}

/* ===== Chat Messages ===== */
.chat-box {
    flex: 1;
    padding: 1rem;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 12px;
}

/* Scrollbar Styling */
.chat-box::-webkit-scrollbar {
    width: 6px;
}
.chat-box::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.4);
    border-radius: 4px;
}

/* Message Bubbles */
.message {
    padding: 10px 15px;
    border-radius: 16px;
    max-width: 80%;
    animation: fadeIn 0.3s ease-in-out;
    line-height: 1.4;
}

.user-message {
    background: #4CAF50;
    color: white;
    align-self: flex-end;
    border-bottom-right-radius: 4px;
}

.bot-message {
    background: rgba(255, 255, 255, 0.3);
    color: #fff;
    align-self: flex-start;
    border-bottom-left-radius: 4px;
}

/* Typing Indicator */
.typing {
    font-style: italic;
    color: rgba(255, 255, 255, 0.8);
    font-size: 0.9rem;
}

/* ===== Input Area ===== */
.chat-input {
    display: flex;
    padding: 0.8rem;
    background: rgba(255, 255, 255, 0.15);
    border-top: 1px solid rgba(255, 255, 255, 0.2);
}

.chat-input input {
    flex: 1;
    padding: 10px;
    border: none;
    outline: none;
    border-radius: 10px;
    font-size: 1rem;
    background: rgba(255, 255, 255, 0.25);
    color: white;
    backdrop-filter: blur(5px);
}

.chat-input input::placeholder {
    color: rgba(255, 255, 255, 0.7);
}

.chat-input button {
    margin-left: 10px;
    padding: 10px 16px;
    background: #4CAF50;
    color: white;
    border: none;
    border-radius: 10px;
    cursor: pointer;
    transition: 0.3s ease;
}

.chat-input button:hover {
    background: #45a049;
}

/* Animation */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

/* ===== Mobile Optimization ===== */
@media (max-width: 480px) {
    .chat-container {
        height: 100vh;
        border-radius: 0;
        max-width: 100%;
    }
}
  </style>
</head>
<body class="theme-glass">
  <div class="wrap">

    <!-- LEFT: controls / theme switch -->
    <div class="left">
      <div class="brand">
        <div class="logo">AI</div>
        <div>
          <h3>Stylish Chatbot</h3>
          <p class="small">Pick a theme — craft your UI vibe</p>
        </div>
      </div>

      <div class="theme-row" role="tablist" aria-label="Theme selector">
        <button class="theme-btn active" data-theme="theme-glass">Glass (Dark)</button>
        <button class="theme-btn" data-theme="theme-neu">Neumorphism</button>
        <button class="theme-btn" data-theme="theme-neon">Neon</button>
      </div>

      <div class="prefs">
        <div class="row">
          <div class="small">Model</div>
          <div class="small">llama3-8b-8192</div>
        </div>
        <div class="row">
          <div class="small">Temperature</div>
          <div class="small">0.7</div>
        </div>
        <div class="row" style="border-bottom:none">
          <div class="small">Max tokens</div>
          <div class="small">500</div>
        </div>
      </div>

      <p class="hint" style="margin-top:14px">Tip: Add your GROQ key to Vercel env var <code>GROQ_API_KEY</code> and redeploy.</p>
    </div>

    <!-- RIGHT: chat card -->
    <div class="chat-card" role="application" aria-label="Chat window">
      <div class="chat-header">
        <div style="flex:1">
          <h2>🤖 Chatbot</h2>
          <div class="sub">Fast • Stylish • Easy to deploy</div>
        </div>
        <div class="small" id="status">Ready</div>
      </div>

      <div class="messages" id="messages" aria-live="polite">
        <!-- initial message -->
        <div class="msg bot">Hello! I'm your stylish assistant — ask me anything.</div>
      </div>

      <div class="input-area">
        <textarea id="input" placeholder="Type a message and press Enter — Shift+Enter for newline"></textarea>
        <button class="send" id="sendBtn">Send</button>
      </div>
    </div>

  </div>

<script>
/* ---------- theme switching ---------- */
const themeButtons = document.querySelectorAll('.theme-btn');
themeButtons.forEach(btn=>{
  btn.addEventListener('click', ()=>{
    // remove active
    themeButtons.forEach(b=>b.classList.remove('active'));
    btn.classList.add('active');

    // switch body class
    const theme = btn.dataset.theme;
    document.body.className = theme;
  })
});

/* ---------- chat behavior ---------- */
const messagesEl = document.getElementById('messages');
const inputEl = document.getElementById('input');
const sendBtn = document.getElementById('sendBtn');
const statusEl = document.getElementById('status');

function appendMessage(text, who='bot'){
  const div = document.createElement('div');
  div.className = 'msg ' + (who === 'user' ? 'user' : 'bot');
  div.innerHTML = text.replace(/\n/g, '<br>');
  messagesEl.appendChild(div);
  messagesEl.scrollTop = messagesEl.scrollHeight - messagesEl.clientHeight;
  return div;
}

function setStatus(txt){
  statusEl.textContent = txt;
}

/* send */
async function sendMessage(){
  const text = inputEl.value.trim();
  if(!text) return;
  appendMessage(text, 'user');
  inputEl.value = '';
  setStatus('Thinking...');
  try{
    // update to your domain if needed
    const res = await fetch('/api/chat', {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify({message: text})
    });

    if(!res.ok){
      // parse JSON or text
      let err;
      try { err = await res.json(); } catch(e){ err = {error: await res.text()}; }
      appendMessage('⚠️ Error: ' + (err?.error || JSON.stringify(err)), 'bot');
      setStatus('Error');
      return;
    }

    const data = await res.json();
    appendMessage(data.reply || 'No reply', 'bot');
    setStatus('Ready');
  }catch(e){
    appendMessage('⚠️ Network error — check API endpoint and environment variables.', 'bot');
    console.error(e);
    setStatus('Network error');
  }
}

/* send on click or Enter */
sendBtn.addEventListener('click', sendMessage);
inputEl.addEventListener('keydown', (e)=>{
  if(e.key === 'Enter' && !e.shiftKey){
    e.preventDefault(); sendMessage();
  }
});

/* accessibility: focus textarea on load */
inputEl.focus();
</script>
</body>
</html>
